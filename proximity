#!/usr/bin/env python

import fcntl
import struct
import array
import bluetooth
import bluetooth._bluetooth as bt
import urllib2

import time
import os
import sys
import datetime
import argparse

parser = argparse.ArgumentParser(description='Determine bluetooth proximity.')
parser.add_argument('--addresses', help='Multiple bluetooth addresses separated with a komma')
parser.add_argument('--urls', help='Url to call to report bluetooth proximity, must match number of bluetooth addresses')
parser.add_argument('--sleep_if_in_range', default='900', help='Time to wait untill next proximity check when device is in range.')
parser.add_argument('--sleep_if_out_of_range', default='1', help='Time to wait untill next proximity check when device is out of range.')
parser.add_argument('--heartbeat_sleep', default='120', help='Time to wait untill the urls are called regardeless of the change of signal strength. Functions as a heartbeat, to check if the script is still running.')
parser.add_argument('--verbose', default='1', help='Display verbose logging')

args = parser.parse_args()

bluetooth_addresses = args.addresses.split(',')
urls = args.urls.split(',')
sleep_if_in_range = int(args.sleep_if_in_range)
sleep_if_out_of_range = int(args.sleep_if_out_of_range)
verbose_logging = int(args.verbose)
heartbeat = int(args.heartbeat_sleep)

print '[%s]' % ', '.join(map(str, bluetooth_addresses))

def bluetooth_rssi(addr):
    # Open hci socket
    hci_sock = bt.hci_open_dev()
    hci_fd = hci_sock.fileno()

    # Connect to device
    bt_sock = bluetooth.BluetoothSocket(bluetooth.L2CAP)
    bt_sock.settimeout(10)
    result = bt_sock.connect_ex((addr, 1))  # PSM 1 - Service Discovery

    try:
        # Get ConnInfo
        reqstr = struct.pack("6sB17s", bt.str2ba(addr), bt.ACL_LINK, "\0" * 17)
        request = array.array("c", reqstr )
        handle = fcntl.ioctl(hci_fd, bt.HCIGETCONNINFO, request, 1)
        handle = struct.unpack("8xH14x", request.tostring())[0]

        # Get RSSI
        cmd_pkt=struct.pack('H', handle)
        rssi = bt.hci_send_req(hci_sock, bt.OGF_STATUS_PARAM,
                               bt.OCF_READ_RSSI, bt.EVT_CMD_COMPLETE, 4, cmd_pkt)
        rssi = struct.unpack('b', rssi[3])[0]

        # Close sockets
        bt_sock.close()
        hci_sock.close()

        return rssi

    except:
        return None

# assume phone is initially out of range
countdown = []
rssi = []
rssi_previous = []
for i, bluetooth_address in enumerate(bluetooth_addresses):
    countdown.append(1)
    rssi.append(-257)
    rssi_previous.append(-257)

while True:
    # get rssi reading for address
    for i, bluetooth_address in enumerate(bluetooth_addresses):
        url_called = False
        countdown[i] -= 1
        if countdown[i] <= 0:
            rssi[i] = bluetooth_rssi(bluetooth_address)
            if rssi[i] is None:
                rssi[i] = -256

            if verbose_logging:
                print datetime.datetime.now(), rssi[i], rssi_previous[i]

            if rssi[i] == rssi_previous[i]:
                if verbose_logging:
                    print "No change detected"
            else:
                if verbose_logging:
                    print "Opening url " + urls[i] + str(rssi[i])
                urllib2.urlopen(urls[i] + str(rssi[i])).read()
                url_called = True

            rssi_previous[i] = rssi[i]

            if rssi[i] == -256:
                countdown[i] = sleep_if_out_of_range
            else:
                countdown[i] = sleep_if_in_range

        if not url_called and heartbeat <= 0:
            if verbose_logging:
                print "Opening url " + urls[i] + str(rssi[i])
            urllib2.urlopen(urls[i] + str(rssi[i])).read()
            heartbeat = int(args.heartbeat_sleep)

    heartbeat -= 1
    time.sleep(1)
